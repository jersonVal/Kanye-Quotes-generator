{"version":3,"sources":["components/quote-show.js","App.js","reportWebVitals.js","index.js"],"names":["QuoteContainer","props","className","id","style","color","quote","author","href","target","backgroundColor","type","onClick","click","App","useState","setQuote","setAuthor","setColor","colors","getData","a","fetch","res","json","data","sentence","character","name","Math","floor","random","length","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAyBeA,EAzBQ,SAACC,GACpB,OACI,sBAAKC,UAAU,YAAYC,GAAG,YAA9B,UACA,qBAAID,UAAU,QAAQE,MAAO,CAACC,MAAM,GAAD,OAAKJ,EAAMI,QAA9C,UACE,mBAAGH,UAAU,sBACb,sBAAMC,GAAG,OAAT,SAAiBF,EAAMK,WAEzB,qBAAKJ,UAAU,SAASE,MAAO,CAACC,MAAM,GAAD,OAAKJ,EAAMI,QAAhD,SACE,mBAAGF,GAAG,SAAN,SAAgBF,EAAMM,WAExB,sBAAKL,UAAU,UAAf,UACE,mBAAGM,KAAK,2BAA2BL,GAAG,cAAcM,OAAO,SAASP,UAAU,MAAME,MAAO,CAACM,gBAAgB,GAAD,OAAKT,EAAMI,QAAtH,SACE,mBAAGH,UAAU,qBAEf,mBAAGM,KAAK,kBAAkBC,OAAO,SAASP,UAAU,MAAME,MAAO,CAACM,gBAAgB,GAAD,OAAKT,EAAMI,QAA5F,SACE,mBAAGH,UAAU,oBAEf,wBAAQS,KAAK,SAASR,GAAG,YAAYS,QAASX,EAAMY,MAAOT,MAAO,CAACM,gBAAgB,GAAD,OAAKT,EAAMI,QAA7F,+BCyBKS,MAtCf,WAEE,MAA0BC,mBAAS,IAAnC,mBAAOT,EAAP,KAAcU,EAAd,KACA,EAA4BD,mBAAS,IAArC,mBAAOR,EAAP,KAAeU,EAAf,KACA,EAA0BF,mBAAS,WAAnC,mBAAOV,EAAP,KAAca,EAAd,KACMC,EAAS,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGIC,EAAO,uCAAG,8BAAAC,EAAA,4DACF,yDADE,SAGIC,MAFN,0DADE,cAGRC,EAHQ,gBAIKA,EAAIC,OAJT,OAIRC,EAJQ,OAMdT,EAASS,EAAKC,UACdT,EAAUQ,EAAKE,UAAUC,MACzBV,EAASC,EAAOU,KAAKC,MAAMD,KAAKE,SAAWZ,EAAOa,UARpC,4CAAH,qDAeb,OAJAC,qBAAU,WACRb,MACA,IAGA,qBAAKlB,UAAU,MAAME,MAAO,CAACM,gBAAgB,GAAD,OAAKL,IAAjD,SACE,cAAC,EAAD,CAAgBC,MAAOA,EAAOC,OAAQA,EAAQF,MAAOA,EAAOQ,MAAOO,OCzB1Dc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.58d1bf9a.chunk.js","sourcesContent":["const QuoteContainer = (props) =>{\r\n    return (\r\n        <div className=\"container\" id=\"quote-box\">\r\n        <h2 className=\"quote\" style={{color: `${props.color}`}}>\r\n          <i className=\"fas fa-quote-left\"></i>\r\n          <span id=\"text\">{props.quote}</span>\r\n        </h2>\r\n        <div className=\"author\" style={{color: `${props.color}`}}>\r\n          <p id=\"author\">{props.author}</p>\r\n        </div>\r\n        <div className=\"buttons\">\r\n          <a href=\"twitter.com/intent/tweet\" id=\"tweet-quote\" target=\"_blank\" className=\"btn\" style={{backgroundColor: `${props.color}`}}>\r\n            <i className=\"fab fa-twitter\"></i>\r\n          </a>\r\n          <a href=\"www.tumblr.com/\" target=\"_blank\" className=\"btn\" style={{backgroundColor: `${props.color}`}}>\r\n            <i className=\"fab fa-tumblr\"></i>\r\n          </a>\r\n          <button type=\"button\" id=\"new-quote\" onClick={props.click} style={{backgroundColor: `${props.color}`}}>\r\n            Next Quote\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default QuoteContainer;","import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport QuoteContainer from './components/quote-show';\n\nfunction App() {\n\n  const [quote, setQuote] = useState('');\n  const [author, setAuthor] = useState('');\n  const [color, setColor] = useState('#00A19D');\n  const colors = [\n    \"#00A19D\",\n    \"#6F69AC\",\n    \"#FFB344\",\n    \"#E05D5D\",\n    \"#80ED99\",\n    \"#FF0000\",\n    \"#86340A\",\n    \"#7EB5A6\"\n  ]\n\n  const getData = async () => {\n    const url = \"https://game-of-thrones-quotes.herokuapp.com/v1/random\"\n\n    const res = await fetch(url)\n    const data = await res.json()\n    \n    setQuote(data.sentence)\n    setAuthor(data.character.name)\n    setColor(colors[Math.floor(Math.random() * colors.length)])\n  }\n\n  useEffect(()=> {\n    getData();\n  },[])\n\n  return (\n    <div className=\"App\" style={{backgroundColor: `${color}`}}>\n      <QuoteContainer quote={quote} author={author} color={color} click={getData}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}